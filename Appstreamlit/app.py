import streamlit as st
import os
import pandas as pd
import numpy as np

import sklearn
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

import matplotlib.pyplot as plt
import plotly.express as px

from bokeh.plotting import figure
from bokeh.models import ColumnDataSource
from bokeh.transform import jitter

import ipaddress
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder


entete= ["date","IpS","IpD","Protocol","PortD","Regle","Acces","carteReseau","Nan","Inconnu"]
data = pd.read_table('firewall.log', sep=';', names=entete)
data["date"] = pd.to_datetime(data["date"])


def home():
    st.title("Accueil")
    st.write("Bienvenue sur la page d'accueil !")
    
    st.write("Voici vos donn√©es :")
    st.write(data)
    
    
################################################################################################################################################################################################################################################
def page2():
    st.title("D√©fensive üõ°")
    
    data['Acces'] = data['Acces'].replace({'Permit': 1, 'Deny': 0})


    X = data[['Acces', 'PortD']]

    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    st.header("Donn√©es S√©lectionn√©es : ")
    st.write(X)
    
    n_clusters = st.sidebar.slider("Nombre de clusters", min_value=2, max_value=10, value=3)
    kmeans = KMeans(n_clusters=n_clusters)
    
    
    data['Cluster'] = kmeans.fit_predict(X_scaled)
    
    st.header("K-means : ")
    st.write("Regroupe les √©v√©nements de s√©curit√© similaires en groupes. Pour identifier les tendances nos logs du Firewall")
    figScatterK = px.scatter(data, y='PortD',x='Acces',color='Cluster', hover_data=data.columns)
    st.plotly_chart(figScatterK)
    
    
    ######################################################
    
    data["heure"] = data['date'].dt.hour
    
    st.header("R√©gression : ")
    st.write("Analyse les relations entre les variables s√©lection√©es, pour identifier les facteurs qui contribuent aux attaques et aux incidents de s√©curit√©.")
    Xdata = pd.get_dummies(data[['PortD', 'Protocol', 'Regle', 'heure']])
    
    ydata = data['Acces'].replace({'Permit': 1, 'Deny': 0})
    st.header("Donn√©es S√©lectionn√©es : ")
    st.write(Xdata)
    
    testsize = st.sidebar.slider("% test", min_value=10, max_value=90, value=20)
    X_train, X_test, y_train, y_test = train_test_split(Xdata, ydata, test_size=testsize*0.01)
    model = LogisticRegression()
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = (y_pred == y_test).mean()
    #st.write("Pr√©cision du mod√®le :", accuracy)
    
    st.write("Coefficients de la r√©gression :")

    st.table(pd.DataFrame(model.coef_, columns=Xdata.columns))

################################################################################################################################################################################################################################################
def page3():
    st.title("Offensive ‚öî")
    
    st.write("Cette partie permet de se mettre √† la place de l'attaquant en utilisant uniquement les donn√©es √† sa dispositon pour construire un mod√®le pr√©dictif permettant de d√©cider si une requ√™te va √™tre accept√©e ou non")

    le_ip = LabelEncoder()
    le_protocol = LabelEncoder()
    # Convertir les adresses IP en nombres
    data['IpS'] = data['IpS'].apply(lambda x: int(ipaddress.ip_address(x)))
    data['IpD'] = data['IpD'].apply(lambda x: int(ipaddress.ip_address(x)))
    data['Protocol'] = le_protocol.fit_transform(data['Protocol'])
    
    # Extraction de certaines informations de la colonne "date"
    data["heure"] = pd.to_datetime(data["date"]).dt.hour
    data["minute"] = pd.to_datetime(data["date"]).dt.minute
    data["jour_semaine"] = pd.to_datetime(data["date"]).dt.dayofweek
    
    # S√©lection des variables √† utiliser pour la pr√©diction
    Xdf = data[["IpS","IpD","Protocol","PortD", "heure", "minute", "jour_semaine"]]
    ydf = data["Acces"]
    
    
    st.header("Donn√©es S√©lectionn√©es : ")
    st.write(Xdf)
    
    # Normalisation des variables
    scaler = StandardScaler()
    Xdf = scaler.fit_transform(Xdf)
    
    # Fractionnement des donn√©es en ensembles d'entra√Ænement et de test
    Xdf_train, Xdf_test, ydf_train, ydf_test = train_test_split(Xdf, ydf, test_size=0.3)
    
    
    st.header("Random Forest : ")
    
    # Entra√Ænement du mod√®le Random Forest
    rf = RandomForestClassifier(n_estimators=100)
    rf.fit(Xdf_train, ydf_train)
    
    # √âvaluation du mod√®le sur l'ensemble de test
    score = rf.score(Xdf_test, ydf_test)
    st.write("Pr√©cision du mod√®le :", score)
    
    #{pd.DataFrame(rf.coef_, columns=Xdf.columns))

    
    
    
    
    


################################################################################################################################################################################################################################################
def page1():
    st.title("Visualisation")

    
    df = data
    
#####connexion par protocole accept√© et rejet√©
    # Filtrer donn√©es par protocole
    protocols = ['TCP', 'UDP']
    df_filtered = df[df['Protocol'].isin(protocols)]

    # Filter data by port range according to RFC 6056
    df_filtered = df_filtered[df_filtered['PortD'].between(49152, 65535)]

    # compt√© les accept√© et rejet√©
    counts = df_filtered.groupby(['Protocol', 'Acces']).size().unstack(fill_value=0)

    #cr√© l'histogramme
    fig, ax = plt.subplots()
    counts.plot(kind='bar', stacked=True, ax=ax)

    ax.set_xlabel('Protocole')
    ax.set_ylabel('nombre de connections')
    ax.set_title('connexion par protocole accept√© et rejet√©')

    # plot Streamlit
    st.pyplot(fig)

    #### Filtrage par plages de ports selon la RFC 6056
    ports = range(49152, 65536) # Plage de ports selon la RFC 6056
    df_ports = df[(df.PortD.isin(ports))]

    # Top 5 des adresses IP sources et destinations les plus actives
    top_ips = pd.concat([df_ports["IpS"], df_ports["IpD"]]).value_counts().nlargest(5)
    fig1, ax1 = plt.subplots()
    ax1.bar(top_ips.index, top_ips.values)
    ax1.set_ylabel("Nombre de flux")
    ax1.set_title("Top 5 des adresses IP les plus actives")

    st.pyplot(fig1)

    #####camembert des flux par protocoles
    df_tcp = df[df["Protocol"]=="TCP"]
    df_udp = df[df["Protocol"]=="UDP"]
    tcp_count = df_tcp.shape[0]
    udp_count = df_udp.shape[0]
    total_count = df.shape[0]
    tcp_pct = tcp_count/total_count*100
    udp_pct = udp_count/total_count*100

    # camenbert
    labels = ["TCP", "UDP"]
    sizes = [tcp_pct, udp_pct]
    colors = ["lightblue", "lightgreen"]
    explode = (0.1, 0)

    fig2, ax2 = plt.subplots()
    ax2.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)
    ax2.axis('equal')
    ax2.set_title("R√©partition des flux par protocole")

    # Affichage avec Streamlit
    st.pyplot(fig2)

    ##### histograme des flux par plages de ports selon la RFC 6056
    df_ports = df[df["PortD"].between(49152, 65535)]
    tcp_ports_count = df_ports[df_ports["Protocol"]=="TCP"].shape[0]
    udp_ports_count = df_ports[df_ports["Protocol"]=="UDP"].shape[0]
    total_ports_count = df_ports.shape[0]
    tcp_ports_pct = tcp_ports_count/total_ports_count*100
    udp_ports_pct = udp_ports_count/total_ports_count*100


    ######## histogramme de l'acc√®s autoris√© ou rejet√© en fonction de la r√®gle
    df_regle = df.groupby(["Regle", "Acces"]).size().reset_index(name="Count")
    
    # histograme
    fig4, ax4 = plt.subplots()
    df_regle_pivot = df_regle.pivot(index="Regle", columns="Acces", values="Count")
    df_regle_pivot.plot(kind="bar", stacked=True, color=["lightgreen", "red"], ax=ax4)
    
    ax4.set_title("R√©partition des acc√®s autoris√©s/rejet√©s en fonction de la r√®gle")
    ax4.set_xlabel("R√®gle")
    ax4.set_ylabel("Nombre d'acc√®s")
    
    # Affichage avec Streamlit
    st.pyplot(fig4)

    
    ##### histograme des flux par plages de ports selon la RFC 6056
    df_ports = df[df["PortD"].between(49152, 65535)]
    tcp_ports_count = df_ports[df_ports["Protocol"]=="TCP"].shape[0]
    udp_ports_count = df_ports[df_ports["Protocol"]=="UDP"].shape[0]
    total_ports_count = df_ports.shape[0]
    tcp_ports_pct = tcp_ports_count/total_ports_count*100
    udp_ports_pct = udp_ports_count/total_ports_count*100
    
    # histograme
    labels = ["TCP", "UDP"]
    sizes = [tcp_ports_pct, udp_ports_pct]
    colors = ["lightblue", "lightgreen"]
    
    fig5, ax5 = plt.subplots()
    patches, _ = ax5.bar(labels, sizes, color=colors)
    
    # Affichage avec Streamlit
    ax5.set_title("R√©partition des flux par plage de ports")
    st.pyplot(fig5)

    ##### Histogramme de la r√©partition des flux rejet√©s et autoris√©s en fonction du port de destination
    df_rejet = df[df["Acces"] == "Deny"]
    df_autorise = df[df["Acces"] == "Permit"]
    
    #histogramme
    fig6, ax6 = plt.subplots()
    ax6.hist([df_rejet["PortD"], df_autorise["PortD"]], bins=50, stacked=True, color=["red", "lightgreen"], label=["Flux rejet√©s", "Flux autoris√©s"])
    
    ax6.set_xlabel("Port de destination")
    ax6.set_ylabel("Nombre de flux")
    ax6.set_title("R√©partition des flux rejet√©s et autoris√©s en fonction du port de destination")
    
    # Affichage avec Streamlit
    st.pyplot(fig6)


    ######### R√©partition des flux autoris√©s et rejet√©s en fonction du protocole (flux = echange de donn√©e calcul√© grace a IPS et IPD)
    # On filtre les flux rejet√©s et autoris√©s
    df_rejet = df[df["Acces"] == "Deny"]
    df_autorise = df[df["Acces"] == "Permit"]
    
    # flux pour chaque protocole
    count_rejet = df_rejet["Protocol"].value_counts()
    count_autorise = df_autorise["Protocol"].value_counts()
    
    # noms des protocoles
    protocoles = list(set(df["Protocol"].tolist()))
    
    # histogramme
    fig7, ax7 = plt.subplots()
    bar_width = 0.35
    ax7.bar(protocoles, count_rejet, bar_width, color="red", label="Flux rejet√©s")
    ax7.bar(protocoles, count_autorise, bar_width, bottom=count_rejet, color="lightgreen", label="Flux autoris√©s")
    
    ax7.set_xlabel("Protocole")
    ax7.set_ylabel("Nombre de flux")
    ax7.set_title("R√©partition des flux autoris√©s et rejet√©s en fonction du protocole")
    ax7.legend()
    
    # Affichage avec Streamlit
    st.pyplot(fig7)    
    
    
    ################## BOKEH
    
    # On filtre les flux autoris√©s
    df_autorise = df[df["Acces"] == "Permit"]
    
    # On cr√©e une source de donn√©es pour Bokeh
    source = ColumnDataSource(df_autorise)
    
    # On cr√©e le graphique
    p = figure(title="R√©partition des ports source des flux autoris√©s", tools="", background_fill_color="#fafafa")
    p.yaxis.axis_label = "Ports source"
    p.xaxis.axis_label = "Nombre de flux"
    p.axis.axis_line_color = None
    
    # On ajoute les burtins
    p.circle(x='PortD', y=jitter('index', width=0.6, range=p.y_range), size=4, alpha=0.6, source=source)
    
    # On affiche le graphique avec Streamlit
    st.bokeh_chart(p, use_container_width=True)
        
    
    
    
    
    
    
    
##################################### MENU ################################################################################################################################################
# Cr√©er une liste des pages
pages = {
    "Accueil": home,
    "Visualisation": page1,
    "D√©fensive üõ°": page2,
    "Offensive ‚öî": page3
}

# Ajouter une barre de navigation pour naviguer entre les pages
st.sidebar.title("Menu üìä")
selection = st.sidebar.radio("Aller √†", list(pages.keys()))

# Ex√©cuter la fonction de la page s√©lectionn√©e
page = pages[selection]
page()